Joseph Kim
QBIO490
25th February 2024

R Review

```{r setup}
knitr::opts_knit$set(root.dir = normalizePath("C:/Users/josep/Desktop/QBIO490/qbio_490_joseph_kim/analysis_data/")) 
```

```{r}
library(TCGAbiolinks)
library(SummarizedExperiment)
library(DESeq2)
library(EnhancedVolcano)
library(maftools)
library(ggplot2)
```

```{r}
clin_query <- GDCquery(project = "TCGA-SKCM",
  data.category = "Clinical",
  data.type = "Clinical Supplement",
  data.format = 'BCR Biotab')

GDCdownload(clin_query)
  
clinical.BCRtab.all <- GDCprepare(clin_query)
  
rad <- clinical.BCRtab.all$clinical_radiation_skcm[-c(1,2),]
drug <- clinical.BCRtab.all$clinical_drug_skcm[-c(1,2),]

```


1. 
```{r}
if (!require(survival)) {
  install.packages("survival")
}

if (!require(survminer)) {
  install.packages("survminer")
}

if (!require(ggplot2)) {
  install.packages("ggplot2")
}

library(survival)
library(survminer)
library(ggplot2)
```

```{r}
rna_query <- GDCquery(project ="TCGA-SKCM",
                      data.category = "Transcriptome Profiling",
                      data.type = "Gene Expression Quantification",
                      workflow.type = "STAR - Counts")

GDCdownload(rna_query)
rna_se <- GDCprepare(rna_query)

rna_clinical <- as.data.frame(rna_se@colData)

meta_mask <- ifelse(rna_clinical$definition %in% c('Metastatic', 'Primary solid Tumor'), TRUE, FALSE)

cleaned_clinical <- rna_clinical[meta_mask, ]
cleaned_clinical$survival_time <- ifelse(!is.na(cleaned_clinical$days_to_last_follow_up), cleaned_clinical$days_to_last_follow_up, cleaned_clinical$days_to_death)
cleaned_clinical$survival_time <- as.numeric(cleaned_clinical$survival_time)

cleaned_clinical$death_event <- ifelse(cleaned_clinical$vital_status == 'Alive', TRUE, FALSE)
```

```{r}
survival_object <- Surv(time = cleaned_clinical$survival_time,
                        event = cleaned_clinical$death_event)

fit_object <- survfit(survival_object ~ definition, data = cleaned_clinical)
```

```{r}
survplot <- ggsurvplot(fit_object,
                       pval=TRUE,
                       ggtheme = theme(plot.margin = unit(c(1,1,1,1), "cm")),
                       legend = 'right')

KM_plot <- survplot$plot + theme_bw() + theme(axis.title = element_text(size=20), 
                                              axis.text = element_text(size=16),
                                              legend.title = element_text(size=14),
                                              legend.text = element_text(size=12))

KM_plot
```


2. 
```{r}
maf_query <- GDCquery(
    project = 'TCGA-SKCM', 
    data.category = "Simple Nucleotide Variation", 
    access = "open", # we only have access to somatic mutations which are open access
    data.type = "Masked Somatic Mutation", 
    workflow.type = "Aliquot Ensemble Somatic Variant Merging and Masking"
)

GDCdownload(maf_query)

maf <- GDCprepare(maf_query) # as long as it runs, ignore any errors

rna_clinical$Tumor_Sample_Barcode <- rna_clinical$patient

maf_object <- read.maf(maf = maf, 
                       clinicalData = rna_clinical,
                       isTCGA = TRUE)
```

```{r}
meta_barcodes <- rna_clinical[cleaned_clinical$definition == "Metastatic", ]
meta_barcodes <- meta_barcodes$Tumor_Sample_Barcode
meta_maf <- subsetMaf(maf = maf_object, tsb = meta_barcodes)

nonmeta_barcodes <- rna_clinical[cleaned_clinical$definition != "Metastatic", ]
nonmeta_barcodes <- nonmeta_barcodes$Tumor_Sample_Barcode
nonmeta_maf <- subsetMaf(maf = maf_object, tsb = nonmeta_barcodes)

coOncoplot(m1 = meta_maf,
           m2 = nonmeta_maf,
           m1Name = "Metastatic",
           m2Name = "Non_Metastatic",
           borderCol = NA,
           )
```



3. 
```{r}
lollipopPlot2(m1 = meta_maf, 
              m2 = nonmeta_maf,
              m1_name = "Metastatic",
              m2_name = "Non_Metastatic",
              gene = "DNAH5"
              )
```



4. 
```{r}
somaticInteractions(maf = meta_maf,
                    top = 10,
                    pvalue = c(0.05, 0.1))

somaticInteractions(maf = nonmeta_maf,
                    top = 10,
                    pvalue = c(0.05, 0.1))

```



5. 
```{r}
rna_genes <- as.data.frame(rna_se@rowRanges@elementMetadata)
rna_counts <- as.data.frame(rna_se@assays@data$unstranded)
colnames(rna_counts) = rownames(rna_clinical)

rows_to_keep <- apply(rna_counts, 1, function(row) any(row >= 20))
rna_counts <- rna_counts[rows_to_keep, ]


```

